# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs

name: Node.js CI

on:
  push:
    branches: [ "actions-test" ]
  pull_request:
    branches: [ "actions-test" ]

jobs:
  build:

    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: postgres
          POSTGRES_PORT: 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    strategy:
      matrix:
        node-version: [16.13.2]
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/

    steps:
      - uses: actions/checkout@v3
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
      - run: npm install yarn -g
      - run: yarn global add grunt
      - run: yarn install
      - name: Create .env file for test environment
        run: |
         touch test/.env
         echo DB_SUPER_USER=postgres >> test/.env
         echo DB_SUPER_PASSWORD=postgres >> test/.env
         echo DB_SUPER_NAME=postgres >> test/.env
         echo DB_READ_ONLY_USER=test_visitor >> test/.env
         echo DB_READ_ONLY_PASSWORD=test_visitor >> test/.env
         echo DB_USER=postgres >> test/.env
         echo DB_PASSWORD=postgres >> test/.env
         echo DB_NAME=sikka-buya-test-database >> test/.env
         echo JWT_SECRET=secret >> test/.env
         echo MAX_SEARCH=100 >> test/.env
         cat test/.env
#    - run: npm run build --if-present
      - run: cd test && grunt test
        working-directory: ./test
        env:
          # use postgres for the host here because we have specified a container for the job.
          # If we were running the job on the VM this would be localhost
          DB_HOST: postgres
          DB_PORT: ${{ job.services.postgres.ports[5432] }}
      - run: cat test/.env
      - run: cd test && grunt test
        working-directory: ./test
        env:
          # use postgres for the host here because we have specified a container for the job.
          # If we were running the job on the VM this would be localhost
          DB_HOST: postgres
          DB_PORT: ${{ job.services.postgres.ports[5432] }}
