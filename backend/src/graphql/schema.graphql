scalar Void
scalar GeoJSON
scalar Upload

type AuthResponse {
  success: Boolean
  message: String
  token: String
  user: User
}

type User {
  id: ID
  email: String
  super: Boolean
  permissions: [String]
}


type Material {
  id: ID
  name: String
  color: String
}

input MintInput {
  name: String
  location: GeoJSON
  uncertain: Boolean
  uncertainArea: GeoJSON
  province: ID
}

type CoinSideInformation {
  fieldText: String
  innerInscript: String
  intermediateInscript: String
  outerInscript: String
  misc: String
}

input CoinSideInformationInput {
  fieldText: String = ""
  innerInscript: String = ""
  intermediateInscript: String = ""
  outerInscript: String = ""
  misc: String = ""
}

type CoinTypePagination {
  pageInfo: PageInfo
  types: [CoinType]
}

type ModCoinTypePagination {
  pageInfo: PageInfo
  types: [ModCoinType]
}

type CoinType {
  avers: CoinSideInformation
  caliph: Person
  coinMarks: [Name]
  coinVerses: [Name]
  cursiveScript: Boolean
  donativ: Boolean
  excludeFromMapApp: Boolean
  excludeFromTypeCatalogue: Boolean
  id: ID
  internalNotes: String
  issuers: [TitledPerson]
  literature: String
  material: Material
  mint: Mint
  mintAsOnCoin: String
  mintUncertain: Boolean
  nominal: Name
  otherPersons: [Person]
  overlords: [Overlord]
  pieces: [String]
  plain_text: String
  procedure: String
  projectId: String
  purity: Float 
  reverse: CoinSideInformation
  small: Boolean
  specials: String
  treadwellId: String
  yearOfMint: String
  yearUncertain: Boolean
  reviewed: Boolean
  completed: Boolean
}

type MintMaterials {
  mint: Mint
  materials: [Material]
}

type ModCoinType {
  id: ID
  projectId: String
  treadwellId: String
  mint: Mint
  mintAsOnCoin: String
  material: Name
  nominal: Name
  yearOfMint: String
  donativ: Boolean
  procedure: String
  issuers: [TitledPerson]
  overlords: [Overlord]
  otherPersons: [Person]
  caliph: Person
  avers: CoinSideInformation
  reverse: CoinSideInformation
  cursiveScript: Boolean
  coinMarks: [Name]
  literature: String
  pieces: [String]
  specials: String
  excludeFromTypeCatalogue: Boolean
  excludeFromMapApp: Boolean
  internalNotes: String
  yearUncertain: Boolean
  mintUncertain: Boolean
  reviewed: Boolean
  completed: Boolean
}

type ModReview {
  completed: Boolean
  reviewed: Boolean
}

input CoinTypeInput {
  avers: CoinSideInformationInput
  caliph: ID = null
  coinMarks: [ID] = []
  coinVerses: [ID] = []
  cursiveScript: Boolean = false
  donativ: Boolean = false
  excludeFromMapApp: Boolean
  excludeFromTypeCatalogue: Boolean
  id: ID = null
  internalNotes: String
  issuers: [TitledPersonInput] = []
  literature: String = ""
  material: ID = null
  mint: ID = null
  mintAsOnCoin: String = ""
  mintUncertain: Boolean
  nominal: ID = null
  otherPersons: [ID] = []
  overlords: [OverlordInput] = []
  pieces: [String] = []
  procedure: String = ""
  projectId: String = ""
  purity: Float = null
  reverse: CoinSideInformationInput
  specials: String = ""
  small: Boolean = false
  treadwellId: String = ""
  yearOfMint: String = ""
  yearUncertain: Boolean
}

type Name {
  id: ID
  name: String
}

type Mint {
  id: ID
  name: String
  location: GeoJSON
  uncertain: Boolean
  uncertainArea: GeoJSON
  province: Name
}

input PersonInput {
  id: ID
  name: String
  shortName: String
  role: ID
  dynasty: ID
  color: String
}

input TitledPersonInput {
  person: ID!
  titles: [ID]!
  honorifics: [ID]!
}

input OverlordInput {
  type: ID
  person: ID!
  rank: Int!
  titles: [Int]!
  honorifics: [Int]!
}

type Dominion {
  overlord: Person
  mints: [Mint]!
}

type RuledMint {
  mint: Mint
  overlords: [Overlord]!
}

type Range {
  from: Int
  to: Int
}

type PersonPosition {
  person: ID
  order: Int
}

type Query {
  locale: String
  ping: String
  environment: String

  # Tested in 004_coin_mark
  coinMark: [Name]
  searchCoinMark(text: String): [Name]!
  getCoinMark(id: ID!): Name

  # Tested in 005_nominal
  nominal: [Name]!
  searchNominal(text: String): [Name]!
  getNominal(id: ID!): Name

  # Tested in 006_material
  material: [Material]!
  searchMaterial(text: String): [Material]!
  getMaterial(id: ID!): Material

  # Tested in 007_mint
  mint: [Mint]!
  searchMint(text: String): [Mint]!
  getMint(id: ID!): Mint

  # Tested in 008_role
  role: [Name]
  searchRole(text: String): [Name]!
  getRole(id: ID!): Name

  # Tested in 009_dynasty
  dynasty: [Name]!
  searchDynasty(text: String): [Name]!
  getDynasty(id: ID!): Name

  # Tested in 010_title
  title: [Name]!
  searchTitle(text: String): [Name]!
  getTitle(id: ID!): Name

  # Tested in 011_honorifics
  honorific: [Name]!
  searchHonorific(text: String): [Name]!
  getHonorific(id: ID!): Name

  # Tested in 012_person
  person(role: ID, dynasty: ID): [Person]!
  searchPerson(text: String): [Person]!
  getPerson(id: ID!): Person

  # Tested in 030_coin_type
  coinType(pagination: Pagination, filters: TypeFilter): CoinTypePagination
  getCoinType(id: ID!): CoinType

  # TODO: missing Tests ---------------------------------------------

  # Tested in 004_coin_mark
  coinVerse: [Name]
  searchCoinVerse(text: String): [Name]!
  getCoinVerse(id: ID!): Name

  mintMaterials: [MintMaterials]
  getMaterialColor(id: ID!): String

  getPersonMints(mints: [ID], persons:[ID]): [MintPersons]

  province: [Name]
  searchProvince(text: String): [Name]
  getProvince(id: ID!): Name

  searchCaliph(text: String): [Person]
  searchOverlord(text: String): [Person]
  searchIssuer(text: String): [Person]

  # TODO remove this and join it with the normal getCoinType method.
  modGetTypes(
    pagination: Pagination
    filters: ModTypeFilter
    evalFilters: EvalFilter
  ): ModCoinTypePagination

  timelineRuledBy(rulers:[ID]!, mints:[ID]): RulerIntArray
  ruledMintCount(rulers: [ID]!,mints: [ID]): [RulerPointArray]
  typeCountOfMints(ids: [ID]): [MintPointArray]

  timelinePlotTypeProperty(name:String!, ids:[ID]):[IdPointArray]


  timespan: Range
  getAnalytics: Analytics


  getDominion(year: Int): [Dominion]
  ruledMint(year: Int): [RuledMint]

  getComments(property: String, propertyId: ID): [Comment]
  getNote(property: String, propertyId: ID): String

  searchPersonsWithRole(
    text: String!
    include: [String]
    exclude: [String]
  ): [Person]!
  searchPersonsWithoutRole(text: String!, dynasty: ID): [Person]!

  isSuperUserSet: Boolean
  databaseExists: Boolean
  getUser(id:ID!): User
  users: [User]
  login(email: String!, password: String!): AuthResponse
  auth(token: String): User

  getLang(id: ID!, table: String!, lang: String!, attr: String!): String #TODO REMOVE

  getPersonExplorerOrder: [PersonPosition]
  fixDiff: String

  fullSearchOnTypes(
    text: String
    pagination: Pagination
  ): PaginationTypeTextSearch

  getPage(group:String, id:Int): Page
  getPageList(group:String!): [Page]
  getImage(identity:String!):String
  getPageGroup(name:String):ID
  getSinglePage(group: String!): Page

  i18n:String
}

type MintPersons {
  mint: Mint,
  caliphs:[Person],
  issuers: [Person],
  overlords: [Person],
  heirs: [Person],
}

type MintPointArray {
  mint: Mint
  data: [Point]
}

type IdPointArray {
  id: Int!
  data: [Point]!
}

type RulerIntArray {
  ruler: [Person],
  data: [Int]
}

type RulerPointArray {
  ruler: Person,
  data: [Point]
}

type Point {
  x: Int
  y: Int
}

type PaginationTypeTextSearch {
  pagination: PageInfo
  results: [TypeTextSearch]
}

type TypeTextSearch {
  type: CoinType
  preview: String
}

type Mutation {
  # Tested in 002_setup
  setup(email: String!, password: String!): AuthResponse

  # Tested in 003_user
  inviteUser(email: String): Boolean
  acceptInvite(email: String, password: String): Void
  grantPermission(user:ID!, permission:String!):Void
  revokePermission(user:ID!, permission:String!):Void

  # Tested in 004_coin_mark
  addCoinMark(name: String!): Void
  updateCoinMark(id: ID!, name: String!): Void
  deleteCoinMark(id: ID): Void

  # Tested in 005_nominal
  addNominal(name: String!): Void
  updateNominal(id: ID!, name: String!): Void
  deleteNominal(id: ID): Void

  # Tested in 006_material
  addMaterial(name: String!, color: String): ID
  updateMaterial(id: ID!, name: String!, color: String): Void
  deleteMaterial(id: ID): Void

  # Tested in 007_mint
  addMint(data: MintInput): ID
  updateMint(id: ID!, data: MintInput): Void
  deleteMint(id: ID): Void

  # Tested in 008_role
  addRole(name: String!): Void
  updateRole(id: ID!, name: String!): Void
  deleteRole(id: ID): Void

  # Tested in 009_dynasty
  addDynasty(name: String!): Void
  updateDynasty(id: ID!, name: String!): Void
  deleteDynasty(id: ID): Void

  # Tested in 010_title
  addTitle(name: String!): Void
  updateTitle(id: ID!, name: String!): Void
  deleteTitle(id: ID): Void

  # Tested in 011_honorifics
  addHonorific(name: String!): Void
  updateHonorific(id: ID!, name: String!): Void
  deleteHonorific(id: ID): Void

  # Tested in 012_person
  addPerson(data: PersonInput): Void
  updatePerson(data: PersonInput): Void
  deletePerson(id: ID): Void

  # Tested in 015_coin_type_review
  setTypeComplete(id: ID!, completed: Boolean = true): Boolean
  setTypeReviewed(id: ID!, reviewed: Boolean = true): Boolean

  # Tested in 030_coin_type
  addCoinType(data: CoinTypeInput): Void
  updateCoinType(id: ID, data: CoinTypeInput): Void
  deleteCoinType(id: ID): Void

  # TODO: missing Tests ---------------------------------------------

  # Tested in 031_coin_verse
  addCoinVerse(name: String!): Void
  updateCoinVerse(id: ID!, name: String!): Void
  deleteCoinVerse(id: ID): Void
  moveCoinTypeToCoinVerse(id:ID):Void
  moveCoinVerseToCoinType(id:ID):Void

  deleteUser(id: ID): Void

  addProvince(name: String!): Void
  updateProvince(id: ID!, name: String!): Void
  deleteProvince(id: ID): Void

  updateNote(text: String, property: String, propertyId: ID): Void
  updateLang(
    id: ID!
    table: String!
    lang: String!
    attr: String!
    value: String!
  ): Void
  addComment(text: String, user: ID, property: String, propertyId: ID): Void



  changePersonExplorerOrder(person: ID!, position: Int!): Void

  updateMaterialColor(id: ID!, color: String!): Void
  deleteMaterialColor(id: ID): Void

  createPage(title: String, group:String!): ID
  updatePage(id: ID!, page: PageInput):Void
  deletePage(id: ID!):Void
  createBlock(parent: ID!, block: PageBlockInput):ID
  updateBlock(id:ID!, block: PageBlockInput):Void
  deleteBlock(id:ID!):Void
  createPageGroup(name:String):ID
  
  uploadFile(identity:String!, file:Upload!):Void
  setLang(path:String!, lang:String!, singular:String!, plural:String):Void
}

input PageInput {
  id: ID
  title: String
  subtitle:String
  summary:String
  body: String
  image: String
  createdTimestamp: String
  publishedTimestamp: String
  modifiedTimestamp: String
}

type Page {
  id: ID
  title: String
  subtitle:String
  summary:String
  body: String
  image: String
  createdTimestamp: String
  publishedTimestamp: String
  modifiedTimestamp: String
  author: String
  blocks: [PageBlock]
}

input PageBlockInput {
  subBlock:Boolean
  parent: ID
  type:String!
  position: Int!
  text: String
  image: String
  children: [PageBlockInput]
}

type PageBlock {
  id: ID
  type:String
  position: Int
  text: String
  image: String
  children: [PageBlock]
}

input Pagination {
  count: Int!
  page: Int!
}

input EvalFilter {
  completed: Boolean
  reviewed: Boolean
}

input ModTypeFilter {
  projectId: String
  donativ: Boolean
  cursiveScript: Boolean
  excludeFromTypeCatalogue: Boolean
  excludeFromMapApp: Boolean
  yearUncertain: Boolean
  mintUncertain: Boolean
  mint: ID
  caliph: ID
  nominal: ID 
  material: ID
  coinMark: ID
  reviewed: Boolean
  completed: Boolean
}

input TypeFilter {
  id:ID

  caliph: [ID]
  heir: [ID]
  coinMark: [ID]
  coinMark_and_or: [[ID]]
  coinMark_and: [ID]
  coinMark_or_and: [[ID]] 

  coinVerse: [ID]
  coinVerse_and_or: [[ID]]
  coinVerse_and: [ID]
  coinVerse_or_and: [[ID]]

  cursiveScript: Boolean
  donativ: Boolean
  excludeFromMapApp: Boolean
  excludeFromTypeCatalogue: Boolean
  honorific: [ID]
  honorific_and: [ID]
  material: [ID]
  mint: [ID]
  mintUncertain: Boolean
  nominal: [ID]
  otherPerson: [ID]
  otherPerson_and: [ID]
  plain_text: String
  procedure: String
  projectId: String
  ruler: [ID]
  ruler_and: [ID]
  small:Boolean
  title: [ID]
  title_and: [ID]
  treadwellId: String
  yearOfMint: String
  yearUncertain: Boolean
}

type PageInfo {
  page: Int
  count: Int
  last: Int
  total: Int
}

type Note {
  id: ID
  text: String
}

type Comment {
  id: ID
  user: User
  time: String
  text: String
}

interface IPerson {
  id: ID
  name: String
  shortName: String
  role: Name
  dynasty: Name
}

interface ITitled {
  titles: [Name]
  honorifics: [Name]
}

type Person implements IPerson {
  id: ID
  name: String
  shortName: String
  role: Name
  dynasty: Name
  color: String
}

# input TitledPerson {
#   id: ID
# }

type TitledPerson implements IPerson & ITitled {
  id: ID
  name: String
  shortName: String
  role: Name
  dynasty: Name
  color: String
  titles: [Name]!
  honorifics: [Name]!
}

type Overlord implements IPerson & ITitled {
  id: ID
  name: String
  shortName: String
  role: Name
  dynasty: Name
  color: String
  rank: Int!
  titles: [Name]!
  honorifics: [Name]!
}

type Analytics {
  typeCount: Int
  mintCount: Int
  yearCount: Int
}
